"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../../constants");
var get_chunk_type_of_node_1 = require("../get-chunk-type-of-node");
var get_import_nodes_1 = require("../get-import-nodes");
test('it classifies a default import as other', function () {
    var importNodes = get_import_nodes_1.getImportNodes("import a from \"a\";");
    expect(importNodes.length).toBe(1);
    expect(get_chunk_type_of_node_1.getChunkTypeOfNode(importNodes[0])).toBe(constants_1.chunkTypeOther);
});
test('it classifies a named import as other', function () {
    var importNodes = get_import_nodes_1.getImportNodes("import {a} from \"a\";");
    expect(importNodes.length).toBe(1);
    expect(get_chunk_type_of_node_1.getChunkTypeOfNode(importNodes[0])).toBe(constants_1.chunkTypeOther);
});
test('it classifies a type import as other', function () {
    var importNodes = get_import_nodes_1.getImportNodes("import type {a, b} from \"a\";", {
        plugins: ['typescript'],
    });
    expect(importNodes.length).toBe(1);
    expect(get_chunk_type_of_node_1.getChunkTypeOfNode(importNodes[0])).toBe(constants_1.chunkTypeOther);
});
test('it classifies an import with type modifiers as other', function () {
    var importNodes = get_import_nodes_1.getImportNodes("import {type a, b} from \"a\";", {
        plugins: ['typescript'],
    });
    expect(importNodes.length).toBe(1);
    expect(get_chunk_type_of_node_1.getChunkTypeOfNode(importNodes[0])).toBe(constants_1.chunkTypeOther);
});
test('it classifies a side-effect import as unsortable', function () {
    var importNodes = get_import_nodes_1.getImportNodes("import \"a\";");
    expect(importNodes.length).toBe(1);
    expect(get_chunk_type_of_node_1.getChunkTypeOfNode(importNodes[0])).toBe(constants_1.chunkTypeUnsortable);
});
test('it classifies a named import with an ignore next line comment as unsortable', function () {
    var importNodes = get_import_nodes_1.getImportNodes("// prettier-ignore\n    import {a} from \"a\";");
    expect(importNodes.length).toBe(1);
    expect(get_chunk_type_of_node_1.getChunkTypeOfNode(importNodes[0])).toBe(constants_1.chunkTypeUnsortable);
});
test('it classifies a side-effect import with a ignore next line comment as unsortable', function () {
    var importNodes = get_import_nodes_1.getImportNodes("// prettier-ignore\n    import \"a\";");
    expect(importNodes.length).toBe(1);
    expect(get_chunk_type_of_node_1.getChunkTypeOfNode(importNodes[0])).toBe(constants_1.chunkTypeUnsortable);
});
test('it classifies a type import with an ignore next line comment as unsortable', function () {
    var importNodes = get_import_nodes_1.getImportNodes("// prettier-ignore\n    import type { a } from \"a\";", { plugins: ['typescript'] });
    expect(importNodes.length).toBe(1);
    expect(get_chunk_type_of_node_1.getChunkTypeOfNode(importNodes[0])).toBe(constants_1.chunkTypeUnsortable);
});
test('it classifies an import with a type modifier and an ignore next line comment as unsortable', function () {
    var importNodes = get_import_nodes_1.getImportNodes("// prettier-ignore\n    import { a, type b } from \"a\";", { plugins: ['typescript'] });
    expect(importNodes.length).toBe(1);
    expect(get_chunk_type_of_node_1.getChunkTypeOfNode(importNodes[0])).toBe(constants_1.chunkTypeUnsortable);
});
test('it only applies the ignore next line comments to the next line', function () {
    var importNodes = get_import_nodes_1.getImportNodes("// prettier-ignore\n    import {b} from \"b\";\n    import {a} from \"a\";");
    expect(importNodes.length).toBe(2);
    expect(get_chunk_type_of_node_1.getChunkTypeOfNode(importNodes[0])).toBe(constants_1.chunkTypeUnsortable);
    expect(get_chunk_type_of_node_1.getChunkTypeOfNode(importNodes[1])).toBe(constants_1.chunkTypeOther);
});
